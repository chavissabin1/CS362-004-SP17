        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * unittest3.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTFUNCTION "gainCard"
        -:   19:#define MAX_TESTS 5
        -:   20:#define TEST_1 0
        -:   21:#define TEST_2 1
        -:   22:#define TEST_3 2
        -:   23:#define TEST_4 3
        -:   24:#define TEST_5 4
        -:   25:#define TEST_6 5
        -:   26:#define TEST_7 6
        -:   27:#define TRUE 1
        -:   28:#define FALSE 0
        -:   29:/*
        -:   30: *added card for [whoseTurn] current player:
        -:   31: * toFlag = 0 : add to discard
        -:   32: * toFlag = 1 : add to deck
        -:   33: * toFlag = 2 : add to hand
        -:   34: * Card Rules:
        -:   35: *1.Check if card is not in game.
        -:   36: *2. Add selected card to deck
        -:   37: *3. Add selected card to hand
        -:   38: *4. Add selected card to discard.
        -:   39: *5. Test that selected card's supply is decreased by one
        -:   40: */
        -:   41:
        8:   42:void assertEquals(int Test,  int prev, int post)
        -:   43:{
        8:   44:	if(prev == post)
        8:   45:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   46:	else
    #####:   47:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        8:   48:}
        -:   49:
        -:   50:
        5:   51:int runTest(int testNum){
        5:   52:	int numPlayers = 2;
        5:   53:	int subTest = 1;
        5:   54:	int newCard = 1;
        5:   55:	int seed = 1000;
        5:   56:	int thisPlayer = 0;
        5:   57:	int discard = 1;
        -:   58:	struct gameState G, testG;
        5:   59:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   60:			sea_hag, tribute, smithy, council_room};	
        -:   61:	
        5:   62:	int baron = 15;//used as test card that does not exists in game.
        -:   63:	int result;
        5:   64:	initializeGame(numPlayers, k, seed, &G);
        -:   65:    
        -:   66:	
        -:   67:	// copy the game state to a test case
        5:   68:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:	
        5:   70:	switch(testNum)
        -:   71:	{
        -:   72:		case TEST_1:
        -:   73:			
        1:   74:			printf("Test 1.Check if card is not in game.\n\n");
        1:   75:			result = gainCard(baron, &testG, 0, thisPlayer);
        -:   76:			
        1:   77:			printf("Card not in game result = %d, expected = %d\n\n", result, -1);
        1:   78:			assertEquals(subTest, result, -1);
        -:   79:			
        1:   80:			return 0;
        -:   81:		case TEST_2:
        1:   82:			printf("Test 2. Add selected card to deck\n\n");
        -:   83:			
        1:   84:			result = gainCard(k[0], &testG, 1, thisPlayer);
        1:   85:			printf("Test 2.1. check if card is added to deck\n\n");
        -:   86:			
        1:   87:			printf("card added to deck is = %d, expected = %d\n\n", testG.deck[thisPlayer][testG.deckCount[thisPlayer]-1], k[0]);
        1:   88:			assertEquals(subTest, testG.deck[thisPlayer][testG.deckCount[thisPlayer]-1], k[0]);
        1:   89:			subTest++;
        -:   90:			
        1:   91:			printf("Test 2.2. check if deck has incremented\n\n");
        -:   92:			
        1:   93:			printf("Deck count = %d, expected = %d\n\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+newCard);
        1:   94:			assertEquals(subTest, testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+newCard);
        -:   95:			
        1:   96:			return 0;
        -:   97:		case TEST_3:
        1:   98:			printf("Test 3. Add selected card to hand\n\n");
        -:   99:			
        1:  100:			result = gainCard(k[0], &testG, 2, thisPlayer);
        1:  101:			printf("Test 3.1. check if card is added to deck\n\n");
        -:  102:			
        -:  103:			
        1:  104:			printf("card added to hand is = %d, expected = %d\n\n", testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], k[0]);
        1:  105:			assertEquals(subTest, testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], k[0]);
        1:  106:			subTest++;
        -:  107:						
        1:  108:			printf("Test 3.2. check if hand has incremented\n\n");
        -:  109:			
        1:  110:			printf("Deck count = %d, expected = %d\n\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]+newCard);
        1:  111:			assertEquals(subTest, testG.handCount[thisPlayer], G.handCount[thisPlayer]+newCard);
        -:  112:					
        1:  113:			return 0;
        -:  114:		case TEST_4:
        -:  115:		
        1:  116:			printf("Test 4. Add selected card to discard.\n\n");
        -:  117:			
        1:  118:			result = gainCard(k[0], &testG, 0, thisPlayer);
        1:  119:			printf("Test 4.1. check if card is added to discard\n\n");
        -:  120:						
        1:  121:			printf("card added to discard is = %d, expected = %d\n\n", testG.discard[thisPlayer][testG.discardCount[thisPlayer]-1], k[0]);
        1:  122:			assertEquals(subTest, testG.discard[thisPlayer][testG.discardCount[thisPlayer]-1], k[0]);
        1:  123:			subTest++;
        -:  124:			
        -:  125:			
        1:  126:			printf("Test 4.2. check if discard pile has incremented\n\n");
        -:  127:			
        1:  128:			printf("Deck count = %d, expected = %d\n\n", testG.discardCount[thisPlayer], G.discardCount[thisPlayer]+newCard);
        1:  129:			assertEquals(subTest, testG.discardCount[thisPlayer], G.discardCount[thisPlayer]+newCard);
        -:  130:			
        1:  131:			return 0;
        -:  132:		case TEST_5:
        -:  133:		
        1:  134:			printf("Test 5. Test that selected card's supply is decreased by one\n\n");
        -:  135:			
        1:  136:			result = gainCard(k[0], &testG, 1, thisPlayer);
        -:  137:			
        1:  138:			printf("Card supply is = %d, expected = %d\n\n",testG.supplyCount[k[0]], G.supplyCount[k[0]]-discard);
        1:  139:			assertEquals(subTest, testG.supplyCount[k[0]], G.supplyCount[k[0]]-discard);
        -:  140:			
        1:  141:			return 0;
        -:  142:		default:
    #####:  143:			return -1;
        -:  144:	}
        -:  145:}
        -:  146:
        1:  147:int main(){
        -:  148:	int i;
        -:  149:	
        1:  150:	printf("*******************************************\n");
        1:  151:    printf("---------- STARTING Test: %s ----------\n", TESTFUNCTION);
        1:  152:	printf("*******************************************\n");
        -:  153:    
        6:  154:	for(i=0;i<MAX_TESTS;i++)
        -:  155:	{
        5:  156:		runTest(i);
        -:  157:	}
        -:  158:
        1:  159:    printf("*******************************************\n");
        1:  160:    printf("---------- COMPLETED Test: %s ---------\n", TESTFUNCTION);
        1:  161:	printf("*******************************************\n");
        1:  162:	printf("\n"); 
        1:  163:	printf("\n"); 
        1:  164:    return 0;
        -:  165:}
