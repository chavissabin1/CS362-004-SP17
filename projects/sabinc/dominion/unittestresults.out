*******************************************
---------- STARTING Test: Smithy ----------
*******************************************
Test 1. Current player should receive exactly 3 cards.
hand count = 7, expected = 7

**********************Test #1: PASS

Test 2. 3 cards should come from player's pile.
deck count = 2, expected = 2

**********************Test #2: PASS

Test 3. No state change should occur for other players.
hand count from other player = 0, expected = 0

**********************Test #3: PASS

deck count from other player = 10, expected = 10

**********************Test #3: PASS

Test 4. No state change should occur to the victory card piles and kingdom card piles.
supply count for adventurer = 10, expected 10

**********************Test #4: PASS


supply count for embargo = 10, expected 10

**********************Test #4: PASS


supply count for village = 10, expected 10

**********************Test #4: PASS


supply count for minion = 10, expected 10

**********************Test #4: PASS


supply count for mine = 10, expected 10

**********************Test #4: PASS


supply count for cutpurse = 10, expected 10

**********************Test #4: PASS


supply count for sea_hag = 10, expected 10

**********************Test #4: PASS


supply count for tribute = 10, expected 10

**********************Test #4: PASS


supply count for smithy = 10, expected 10

**********************Test #4: PASS


supply count for council_room = 10, expected 10

**********************Test #4: PASS


supply count for estate = 8, expected 8

**********************Test #4: PASS


supply count for duchy = 8, expected 8

**********************Test #4: PASS


supply count for province = 8, expected 8

**********************Test #4: PASS


supply count for copper = 46, expected 46

**********************Test #4: PASS


supply count for silver = 40, expected 40

**********************Test #4: PASS


supply count for gold = 30, expected 30

**********************Test #4: PASS


*******************************************
---------- COMPLETED Test: Smithy ---------
*******************************************


File 'cardtest1.c'
Lines executed:98.00% of 50
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * cardtest1.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTCARD "Smithy"
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:#define MAX_S 16
        -:   22:
       20:   23:void assertEquals(int Test,  int prev, int post)
        -:   24:{
       20:   25:	if(prev == post)
       20:   26:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   27:	else
    #####:   28:		printf("\n**********************Test #%d: FAIL\n\n", Test);
       20:   29:}
        -:   30:
        -:   31:
        -:   32:/*
        -:   33: * Card Rules:
        -:   34: *1. Current player should receive exactly 3 cards.
        -:   35: *2. 3 cards should come from his own pile.
        -:   36: *3. No state change should occur for other players.
        -:   37: *4. No state change should occur to the victory card piles and kingdom card piles.
        -:   38: *
        -:   39: */
        -:   40:
        1:   41:int main(){
        1:   42:    int newCards = 0;
        1:   43:    int discarded = 1;
        1:   44:	int testNum = 1;
        1:   45:    int shuffledCards = 0; 
        -:   46:	int i, j;
        1:   47:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   48:    int seed = 1000;
        1:   49:    int numPlayers = 2;
        1:   50:    int thisPlayer = 0;
        -:   51:	struct gameState G, testG;
        -:   52:	
        1:   53:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   54:			sea_hag, tribute, smithy, council_room};
        -:   55:			
        1:   56:	int supply[MAX_S] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   57:			sea_hag, tribute, smithy, council_room, estate, duchy, province, copper,
        -:   58:			silver, gold};
        -:   59:
        1:   60:	char *str_sup[MAX_S] = {"adventurer", "embargo", "village", "minion", "mine", "cutpurse",
        -:   61:			"sea_hag", "tribute", "smithy", "council_room", "estate", "duchy", "province", "copper",
        -:   62:			"silver", "gold"};
        -:   63:			
        -:   64:	// initialize a game state and player cards
        1:   65:	initializeGame(numPlayers, k, seed, &G);
        -:   66:	
        1:   67:	printf("*******************************************\n");
        1:   68:    printf("---------- STARTING Test: %s ----------\n", TESTCARD);
        1:   69:	printf("*******************************************\n");
        -:   70:	
        -:   71:	// copy the game state to a test case
        1:   72:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   73:
        1:   74:	cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   75:	newCards = 3;
        -:   76:	
        1:   77:	printf("Test 1. Current player should receive exactly 3 cards.\n");
        1:   78:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   79:	assertEquals(testNum, testG.handCount[thisPlayer],G.handCount[thisPlayer] + newCards - discarded);
        1:   80:	testNum++;
        -:   81:	
        1:   82:	printf("Test 2. 3 cards should come from player's pile.\n");
        1:   83:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   84:	assertEquals(testNum, testG.deckCount[thisPlayer],G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   85:	testNum++;
        -:   86:	
        1:   87:	printf("Test 3. No state change should occur for other players.\n");
        2:   88:	for(i = thisPlayer+1;i < numPlayers; i++){
        1:   89:		printf("hand count from other player = %d, expected = %d\n", testG.handCount[i], G.handCount[i]);
        1:   90:		assertEquals(testNum, testG.handCount[i], G.handCount[i]);
        1:   91:		printf("deck count from other player = %d, expected = %d\n", testG.deckCount[i], G.deckCount[i]);
        1:   92:		assertEquals(testNum, testG.deckCount[i], G.deckCount[i]);
        -:   93:	}
        1:   94:	testNum++;
        -:   95:	
        1:   96:    printf("Test 4. No state change should occur to the victory card piles and kingdom card piles.\n");
        -:   97:	
        -:   98:	/*4. No state change should occur to the victory card piles and kingdom card piles.*/
       17:   99:	for(j=0;j<MAX_S; j++)
        -:  100:	{
       16:  101:		printf("supply count for %s = %d, expected %d\n", str_sup[j], testG.supplyCount[supply[j]],G.supplyCount[supply[j]]);
       16:  102:		assertEquals(testNum, testG.supplyCount[supply[j]], G.supplyCount[supply[j]]);
       16:  103:		printf("\n"); 
        -:  104:	}
        -:  105:
        -:  106:    //put tests here
        -:  107:
        1:  108:	printf("*******************************************\n");
        1:  109:    printf("---------- COMPLETED Test: %s ---------\n", TESTCARD);
        1:  110:	printf("*******************************************\n");
        1:  111:	printf("\n"); 
        1:  112:	printf("\n"); 
        1:  113:    return 0;
        -:  114:}
*******************************************
---------- STARTING Test: Village ----------
*******************************************
Test 1. Current player should receive exactly 1 card.
hand count = 5, expected = 5

**********************Test #1: PASS

Test 2. 1 card should come from player's own pile.
deck count = 4, expected = 4

**********************Test #2: PASS

Test 3. Current player should receive exactly 2 actions.
Player action count = 3, expected = 3

**********************Test #3: PASS

Test 4. No state change should occur for other players.
hand count from other player = 0, expected = 0 at index 1

**********************Test #4: PASS

deck count from other player = 10, expected = 10

**********************Test #4: PASS


Test 5. No state change should occur to the victory card piles and kingdom card piles.
supply count for adventurer = 10, expected 10

**********************Test #5: PASS


supply count for embargo = 10, expected 10

**********************Test #5: PASS


supply count for village = 10, expected 10

**********************Test #5: PASS


supply count for minion = 10, expected 10

**********************Test #5: PASS


supply count for mine = 10, expected 10

**********************Test #5: PASS


supply count for cutpurse = 10, expected 10

**********************Test #5: PASS


supply count for sea_hag = 10, expected 10

**********************Test #5: PASS


supply count for tribute = 10, expected 10

**********************Test #5: PASS


supply count for smithy = 10, expected 10

**********************Test #5: PASS


supply count for council_room = 10, expected 10

**********************Test #5: PASS


supply count for estate = 8, expected 8

**********************Test #5: PASS


supply count for duchy = 8, expected 8

**********************Test #5: PASS


supply count for province = 8, expected 8

**********************Test #5: PASS


supply count for copper = 46, expected 46

**********************Test #5: PASS


supply count for silver = 40, expected 40

**********************Test #5: PASS


supply count for gold = 30, expected 30

**********************Test #5: PASS


*******************************************
---------- COMPLETED Test: Village ---------
*******************************************


File 'cardtest2.c'
Lines executed:98.25% of 57
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * cardtest2.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTCARD "Village"
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:#define MAX_S 16
        -:   22:
       21:   23:void assertEquals(int Test,  int prev, int post)
        -:   24:{
       21:   25:	if(prev == post)
       21:   26:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   27:	else
    #####:   28:		printf("\n**********************Test #%d: FAIL\n\n", Test);
       21:   29:}
        -:   30:
        -:   31:/*
        -:   32: * Card Rules:
        -:   33: *1. Current player should receive exactly 1 card.
        -:   34: *2. 1 card should come from player's own pile.
        -:   35: *3. Current player should receive exactly 2 actions.
        -:   36: *4. No state change should occur for other players.
        -:   37: *5. No state change should occur to the victory card piles and kingdom card piles.
        -:   38: */
        -:   39:
        1:   40:int main(){
        1:   41:    int newCards = 0;
        1:   42:	int testNum = 1;
        1:   43:    int discarded = 1;
        1:   44:	int newActions = 0;
        1:   45:    int shuffledCards = 0; int i, j;
        1:   46:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   47:    int seed = 1000;
        1:   48:    int numPlayers = 2;
        1:   49:    int thisPlayer = 0;
        -:   50:	struct gameState G, testG;	
        1:   51:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   52:			sea_hag, tribute, smithy, council_room};
        -:   53:			
        1:   54:	int supply[MAX_S] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   55:			sea_hag, tribute, smithy, council_room, estate, duchy, province, copper,
        -:   56:			silver, gold};
        -:   57:
        1:   58:	char *str_sup[MAX_S] = {"adventurer", "embargo", "village", "minion", "mine", "cutpurse",
        -:   59:			"sea_hag", "tribute", "smithy", "council_room", "estate", "duchy", "province", "copper",
        -:   60:			"silver", "gold"};
        -:   61:			
        -:   62:	// initialize a game state and player cards
        1:   63:	initializeGame(numPlayers, k, seed, &G);
        -:   64:	
        1:   65:	printf("*******************************************\n");
        1:   66:    printf("---------- STARTING Test: %s ----------\n", TESTCARD);
        1:   67:	printf("*******************************************\n");
        -:   68:    
        -:   69:	// copy the game state to a test case
        1:   70:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   71:
        1:   72:	cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   73:		
        1:   74:	newCards = 1;
        1:   75:	newActions = 2;
        -:   76:	
        1:   77:	printf("Test 1. Current player should receive exactly 1 card.\n");
        -:   78:	
        -:   79:	/*1. Current player should receive exactly 1 card.*/
        1:   80:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   81:	assertEquals(testNum, testG.handCount[thisPlayer],G.handCount[thisPlayer] + newCards - discarded);
        1:   82:	testNum++;
        1:   83:	printf("Test 2. 1 card should come from player's own pile.\n");
        -:   84:	
        -:   85:	/*2. 1 card should come from player's own pile.*/
        1:   86:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   87:	assertEquals(testNum, testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   88:	testNum++;
        1:   89:	printf("Test 3. Current player should receive exactly 2 actions.\n");
        -:   90:	
        -:   91:	/*3. Current player should receive exactly 2 actions.*/
        1:   92:	printf("Player action count = %d, expected = %d\n", testG.numActions, G.numActions + newActions);
        1:   93:	assertEquals(testNum, testG.numActions, G.numActions + newActions);
        1:   94:	testNum++;
        1:   95:	printf("Test 4. No state change should occur for other players.\n");	
        -:   96:	
        -:   97:	/*4. No state change should occur for other players.*/
        2:   98:	for(i = thisPlayer+1;i < numPlayers; i++){
        1:   99:		printf("hand count from other player = %d, expected = %d at index %d\n", testG.handCount[i], G.handCount[i], i);
        1:  100:		assertEquals(testNum, testG.handCount[i], G.handCount[i]);
        1:  101:		printf("deck count from other player = %d, expected = %d\n", testG.deckCount[i], G.deckCount[i]);
        1:  102:		assertEquals(testNum, testG.deckCount[i], G.deckCount[i]);
        1:  103:		printf("\n");
        -:  104:	}
        1:  105:	testNum++;
        -:  106:	
        1:  107:	printf("Test 5. No state change should occur to the victory card piles and kingdom card piles.\n");
        -:  108:	
        -:  109:	/*5. No state change should occur to the victory card piles and kingdom card piles.*/
       17:  110:	for(j=0;j<MAX_S; j++)
        -:  111:	{
       16:  112:		printf("supply count for %s = %d, expected %d\n", str_sup[j], testG.supplyCount[supply[j]],G.supplyCount[supply[j]]);
       16:  113:		assertEquals(testNum, testG.supplyCount[supply[j]], G.supplyCount[supply[j]]);
       16:  114:		printf("\n"); 
        -:  115:	}
        -:  116:	
        1:  117:	printf("*******************************************\n");
        1:  118:    printf("---------- COMPLETED Test: %s ---------\n", TESTCARD);
        1:  119:	printf("*******************************************\n");
        1:  120:	printf("\n"); 
        1:  121:	printf("\n"); 
        1:  122:    return 0;
        -:  123:}
*******************************************
---------- STARTING Test: Counsel Room ----------
*******************************************
Test 1. Current player should receive exactly 4 cards.
hand count = 8, expected = 8

**********************Test #1: PASS

Test 2. Current player's cards should come from player's own pile.
deck count = 1, expected = 1

**********************Test #2: PASS

Test 3. Current player should receive exactly 1 buy.
Player action count = 2, expected = 2

**********************Test #3: PASS

Test 4. All other players draw a card
hand count from other player = 1, expected = 1

**********************Test #4: PASS

deck count from other player = 9, expected = 9

**********************Test #4: PASS


Test 5. No state change should occur to the victory card piles and kingdom card piles.
supply count for adventurer = 10, expected 10

**********************Test #5: PASS


supply count for embargo = 10, expected 10

**********************Test #5: PASS


supply count for village = 10, expected 10

**********************Test #5: PASS


supply count for minion = 10, expected 10

**********************Test #5: PASS


supply count for mine = 10, expected 10

**********************Test #5: PASS


supply count for cutpurse = 10, expected 10

**********************Test #5: PASS


supply count for sea_hag = 10, expected 10

**********************Test #5: PASS


supply count for tribute = 10, expected 10

**********************Test #5: PASS


supply count for smithy = 10, expected 10

**********************Test #5: PASS


supply count for council_room = 10, expected 10

**********************Test #5: PASS


supply count for estate = 8, expected 8

**********************Test #5: PASS


supply count for duchy = 8, expected 8

**********************Test #5: PASS


supply count for province = 8, expected 8

**********************Test #5: PASS


supply count for copper = 46, expected 46

**********************Test #5: PASS


supply count for silver = 40, expected 40

**********************Test #5: PASS


supply count for gold = 30, expected 30

**********************Test #5: PASS


*******************************************
---------- COMPLETED Test: Counsel Room ---------
*******************************************


File 'cardtest3.c'
Lines executed:98.31% of 59
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * cardtest3.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTCARD "Counsel Room"
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:#define MAX_S 16
        -:   22:
       21:   23:void assertEquals(int Test,  int prev, int post)
        -:   24:{
       21:   25:	if(prev == post)
       21:   26:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   27:	else
    #####:   28:		printf("\n**********************Test #%d: FAIL\n\n", Test);
       21:   29:}
        -:   30:
        -:   31:
        -:   32:/*
        -:   33: * Card Rules:
        -:   34: *1. Current player should receive exactly 4 cards.
        -:   35: *2. 4 cards should come from player's own pile.
        -:   36: *3. Current player should receive exactly 1 buy.
        -:   37: *4. All other players draw a card
        -:   38: *5. No state change should occur to the victory card piles and kingdom card piles.
        -:   39: *
        -:   40: */
        -:   41:
        1:   42:int main(){
        1:   43:    int newCards = 0;
        1:   44:    int discarded = 1;
        1:   45:	int testNum = 1;
        1:   46:	int newBuys = 0;
        1:   47:    int shuffledCards = 0; 
        -:   48:	int i, j;
        1:   49:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   50:    int seed = 1000;
        1:   51:    int numPlayers = 2;
        1:   52:    int thisPlayer = 0;
        1:   53:	int OppCardDrawCnt = 0;
        -:   54:	struct gameState G, testG;
        -:   55:	
        1:   56:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   57:			sea_hag, tribute, smithy, council_room};
        -:   58:			
        1:   59:	int supply[MAX_S] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   60:			sea_hag, tribute, smithy, council_room, estate, duchy, province, copper,
        -:   61:			silver, gold};
        -:   62:
        1:   63:	char *str_sup[MAX_S] = {"adventurer", "embargo", "village", "minion", "mine", "cutpurse",
        -:   64:			"sea_hag", "tribute", "smithy", "council_room", "estate", "duchy", "province", "copper",
        -:   65:			"silver", "gold"};
        -:   66:	
        -:   67:	// initialize a game state and player cards
        1:   68:	initializeGame(numPlayers, k, seed, &G);
        -:   69:	
        1:   70:	printf("*******************************************\n");
        1:   71:    printf("---------- STARTING Test: %s ----------\n", TESTCARD);
        1:   72:	printf("*******************************************\n");
        -:   73:	
        -:   74:	// copy the game state to a test case
        1:   75:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   76:
        -:   77:	
        1:   78:	cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        1:   79:	newCards = 4;
        1:   80:	newBuys = 1;
        1:   81:	OppCardDrawCnt = 1;
        -:   82:	
        1:   83:	printf("Test 1. Current player should receive exactly 4 cards.\n");
        -:   84:	/*1. Current player should receive exactly 4 cards.*/
        1:   85:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   86:	assertEquals(testNum, testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   87:	testNum++;
        -:   88:	
        1:   89:	printf("Test 2. Current player's cards should come from player's own pile.\n");
        -:   90:	/*2. s cards should come from player's own pile.*/
        1:   91:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   92:	assertEquals(testNum,testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   93:	testNum++;
        -:   94:	
        1:   95:	printf("Test 3. Current player should receive exactly 1 buy.\n");
        -:   96:	/*3. Current player should receive exactly 1 buy.*/
        1:   97:	printf("Player action count = %d, expected = %d\n", testG.numBuys, G.numBuys + newBuys);
        1:   98:	assertEquals(testNum,testG.numBuys, G.numBuys + newBuys);
        1:   99:	testNum++;
        -:  100:	
        1:  101:	printf("Test 4. All other players draw a card\n");
        -:  102:	/*4. All other players draw a card*/
        2:  103:	for(i = thisPlayer+1; i < numPlayers; i++){
        1:  104:		printf("hand count from other player = %d, expected = %d\n", testG.handCount[i], G.handCount[i] + OppCardDrawCnt);
        1:  105:		assertEquals(testNum,testG.handCount[i], G.handCount[i] + OppCardDrawCnt);
        1:  106:		printf("deck count from other player = %d, expected = %d\n", testG.deckCount[i], G.deckCount[i] - OppCardDrawCnt + shuffledCards);
        1:  107:		assertEquals(testNum,testG.deckCount[i], G.deckCount[i] - OppCardDrawCnt + shuffledCards);
        1:  108:		printf("\n");
        -:  109:	}
        1:  110:	testNum++;
        -:  111:	
        1:  112:	printf("Test 5. No state change should occur to the victory card piles and kingdom card piles.\n");
        -:  113:	
        -:  114:	/*5. No state change should occur to the victory card piles and kingdom card piles.*/
       17:  115:	for(j=0;j<MAX_S; j++)
        -:  116:	{
       16:  117:		printf("supply count for %s = %d, expected %d\n", str_sup[j], testG.supplyCount[supply[j]],G.supplyCount[supply[j]]);
       16:  118:		assertEquals(testNum, testG.supplyCount[supply[j]], G.supplyCount[supply[j]]);
       16:  119:		printf("\n"); 
        -:  120:	}
        -:  121:
        1:  122:    printf("*******************************************\n");
        1:  123:    printf("---------- COMPLETED Test: %s ---------\n", TESTCARD);
        1:  124:	printf("*******************************************\n");
        1:  125:	printf("\n"); 
        1:  126:	printf("\n"); 
        1:  127:    return 0;
        -:  128:}
*******************************************
---------- STARTING Test: Adventurer ----------
*******************************************
Test 1. Current player should receive exactly 2 cards.
hand count = 7, expected = 6

**********************Test #1: FAIL

Test 2. Discard pile should have 2 less cards than before.
deck count = 3, expected = 3

**********************Test #2: FAIL

Test 3. New hand's score should outscore the previous hand by at least 2 teasures (indicating that the 2 new cards are at least coppers and above)Score of 1 should score at least 2 higher than 0
**********************Test #3: FAIL

4. All other players states do not change
hand count from other player = 0, expected = 0
deck count from other player = 10, expected = 10

**********************Test #4: PASS


**********************Test #4: PASS

Score of 0 should be >= 0
**********************Test #4: PASS


5. No state change should occur to the victory card piles and kingdom card piles.
supply count for adventurer = 10, expected 10

**********************Test #5: PASS


supply count for embargo = 10, expected 10

**********************Test #5: PASS


supply count for village = 10, expected 10

**********************Test #5: PASS


supply count for minion = 10, expected 10

**********************Test #5: PASS


supply count for mine = 10, expected 10

**********************Test #5: PASS


supply count for cutpurse = 10, expected 10

**********************Test #5: PASS


supply count for sea_hag = 10, expected 10

**********************Test #5: PASS


supply count for tribute = 10, expected 10

**********************Test #5: PASS


supply count for smithy = 10, expected 10

**********************Test #5: PASS


supply count for council_room = 10, expected 10

**********************Test #5: PASS


supply count for estate = 8, expected 8

**********************Test #5: PASS


supply count for duchy = 8, expected 8

**********************Test #5: PASS


supply count for province = 8, expected 8

**********************Test #5: PASS


supply count for copper = 46, expected 46

**********************Test #5: PASS


supply count for silver = 40, expected 40

**********************Test #5: PASS


supply count for gold = 30, expected 30

**********************Test #5: PASS


*******************************************
---------- COMPLETED Test: Adventurer ---------
*******************************************


File 'cardtest4.c'
Lines executed:98.53% of 68
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * cardtest4.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTCARD "Adventurer"
        -:   19:#define TRUE 1
        -:   20:#define FALSE 0
        -:   21:#define MAX_S 16
        -:   22:
       21:   23:void assertEquals(int Test,  int prev, int post)
        -:   24:{
       21:   25:	if(prev == post)
       19:   26:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   27:	else
        2:   28:		printf("\n**********************Test #%d: FAIL\n\n", Test);
       21:   29:}
        -:   30:
        1:   31:void assertGreaterThan(int Test,  int left, int right)
        -:   32:{
        1:   33:	if(left > right)
    #####:   34:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   35:	else
        1:   36:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        1:   37:}
        -:   38:
        -:   39:/*
        -:   40: * Card Rules:
        -:   41: *1. Current player should receive exactly 2 cards.
        -:   42: *2. Discard pile should have 2 less cards than before.
        -:   43: *3. New hand's score should outscore the previous hand by at least 2 teasures 
        -:   44: *	(indicating that the 2 new cards are at least coppers and above)
        -:   45: * other player's score does not change //done
        -:   46: * . Player's hand has two more tresures than before //done
        -:   47: *5. No state change from other players //done
        -:   48: *5. No state change should occur to the victory card piles and kingdom card piles.//TODO look over function
        -:   49: *
        -:   50: */
        -:   51:
        1:   52:int main(){
        1:   53:    int newCards = 0;
        1:   54:    int discarded = 1;
        1:   55:	int testNum = 1;
        1:   56:    int shuffledCards = 0; 
        -:   57:	int i, j, m, n;
        1:   58:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   59:    int seed = 1000;
        1:   60:    int numPlayers = 2;
        1:   61:    int thisPlayer = 0;
        -:   62:	struct gameState G, testG;
        1:   63:	int minAdventererScore = 2;
        1:   64:	int prevScore[numPlayers], postScore[numPlayers];
        -:   65:	
        1:   66:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   67:			sea_hag, tribute, smithy, council_room};
        -:   68:			
        1:   69:	int supply[MAX_S] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   70:			sea_hag, tribute, smithy, council_room, estate, duchy, province, copper,
        -:   71:			silver, gold};
        -:   72:
        1:   73:	char *str_sup[MAX_S] = {"adventurer", "embargo", "village", "minion", "mine", "cutpurse",
        -:   74:			"sea_hag", "tribute", "smithy", "council_room", "estate", "duchy", "province", "copper",
        -:   75:			"silver", "gold"};
        -:   76:			
        -:   77:	// initialize a game state and player cards
        1:   78:	initializeGame(numPlayers, k, seed, &G);
        -:   79:	
        1:   80:	printf("*******************************************\n");
        1:   81:    printf("---------- STARTING Test: %s ----------\n", TESTCARD);
        1:   82:	printf("*******************************************\n");
        -:   83:	
        -:   84:	// copy the game state to a test case
        1:   85:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   86:	
        -:   87:	//gather scores from all players
        3:   88:	for(m = thisPlayer; m <  numPlayers; m++){
        2:   89:		postScore[m] = scoreFor(m,&testG);
        -:   90:		
        -:   91:	}
        -:   92:		
        1:   93:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   94:	
        -:   95:	//gather scores from all players
        3:   96:	for(n = thisPlayer; n <  numPlayers; n++){
        2:   97:		postScore[n] = scoreFor(n,&testG);
        -:   98:	}
        -:   99:	
        1:  100:	newCards = 2;
        -:  101:	
        1:  102:	printf("Test 1. Current player should receive exactly 2 cards.\n");
        -:  103:	/*1. Current player should receive exactly 2 cards.*/
        1:  104:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:  105:	assertEquals(testNum, testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:  106:	testNum++;
        -:  107:	
        1:  108:	printf("Test 2. Discard pile should have 2 less cards than before.\n");
        -:  109:	/*2. 2. Discard pile should have 2 less cards than before.*/
        1:  110:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:  111:	assertEquals(testNum, testG.discardCount[thisPlayer], G.discardCount[thisPlayer] - newCards + discarded);
        1:  112:	testNum++;
        -:  113:
        1:  114:	printf("Test 3. New hand's score should outscore the previous hand by at least 2 teasures (indicating that the 2 new cards are at least coppers and above)");
        -:  115:	/*3.New hand's score should outscore the previous hand by at least 2 teasures (indicating that the 2 new cards are at least coppers and above) */
        1:  116:	printf("Score of %d should score at least 2 higher than %d",postScore[thisPlayer],prevScore[thisPlayer]);
        1:  117:	assertGreaterThan(testNum, postScore[thisPlayer], prevScore[thisPlayer]+minAdventererScore-1);	
        1:  118:	testNum++;
        -:  119:	
        1:  120:	printf("4. All other players states do not change\n");
        -:  121:	/*4. All other players states do not change*/
        2:  122:	for(i = thisPlayer+1;i < numPlayers; i++){
        1:  123:		printf("hand count from other player = %d, expected = %d\n", testG.handCount[i], G.handCount[i]);
        1:  124:		printf("deck count from other player = %d, expected = %d\n", testG.deckCount[i], G.deckCount[i]);
        1:  125:		assertEquals(testNum, testG.handCount[i], G.handCount[i]);
        1:  126:		assertEquals(testNum, testG.deckCount[i], G.deckCount[i]);
        1:  127:		printf("Score of %d should be >= %d",postScore[i],prevScore[i]);
        1:  128:		assertEquals(testNum, postScore[i], prevScore[i]);
        1:  129:		printf("\n");
        -:  130:	}
        1:  131:	testNum++;
        -:  132:	
        1:  133:	printf("5. No state change should occur to the victory card piles and kingdom card piles.\n");
        -:  134:	/*5. No state change should occur to the victory card piles and kingdom card piles.*/
       17:  135:	for(j=0;j<MAX_S; j++)
        -:  136:	{
       16:  137:		printf("supply count for %s = %d, expected %d\n", str_sup[j], testG.supplyCount[supply[j]],G.supplyCount[supply[j]]);
       16:  138:		assertEquals(testNum, testG.supplyCount[supply[j]], G.supplyCount[supply[j]]);
       16:  139:		printf("\n"); 
        -:  140:	}
        -:  141:	
        1:  142:    printf("*******************************************\n");
        1:  143:    printf("---------- COMPLETED Test: %s ---------\n", TESTCARD);
        1:  144:	printf("*******************************************\n");
        1:  145:	printf("\n"); 
        1:  146:	printf("\n"); 
        1:  147:    return 0;
        -:  148:}
*******************************************
---------- STARTING Test: discardCard ----------
*******************************************
Test 1. Card is added to play pile if card is not trashed.

Test 1.1 Card is added to play pile.

Top card from played pile = 4, expected = 4


**********************Test #1: PASS

Test 1.2 Play pile count incremented.

Played card count = 1, expected = 1


**********************Test #2: PASS

Test 2. Card is not added to play pile if card is trashed.

Test 2.1 Card is added to play pile.

Top card from played pile = 0, expected = 4


**********************Test #1: PASS

Test 2.2 Play pile count incremented.

Played card count = 0, expected = 0


**********************Test #2: PASS

Test 3. Selected card is removed from hand.

Test 3.1 Card is removed from top of hand.

Top card from hand = -1, expected = -1


**********************Test #1: PASS

Test 3.2 hand count has decremented by one.

Hand count = 4, expected = 4


**********************Test #2: PASS

Test 3.3 Card is removed from hand with more than one card in hand and top card not selected.

Top card from hand = 4, expected = 4


**********************Test #3: PASS

Test 3.4 hand count has decremented by one.

Hand count = 3, expected = 3


**********************Test #4: PASS

Test 3.5 Last card from hand is removed.

hand count is 1

selectedcard = 4

Last card from hand = -1, expected = -1


**********************Test #5: PASS

Test 3.6 hand count is 0.

Hand count = 0, expected = 0


**********************Test #6: PASS

*******************************************
---------- COMPLETED Test: discardCard ---------
*******************************************


File 'unittest1.c'
Lines executed:97.20% of 107
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * unittest1.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTFUNCTION "discardCard"
        -:   19:#define MAX_TESTS 3
        -:   20:#define TEST_1 0
        -:   21:#define TEST_2 1
        -:   22:#define TEST_3 2
        -:   23:#define TRUE 1
        -:   24:#define FALSE 0
        -:   25:/*
        -:   26: * Function Rules:
        -:   27: *1. Card is added to play pile if card is not trashed.
        -:   28: *2. Card is not added to play pile if card is trashed.
        -:   29: *3. Selected card is removed from hand.
        -:   30: *
        -:   31: */
        -:   32:
        9:   33: void assertEquals(int Test,  int prev, int post)
        -:   34:{
        9:   35:	if(prev == post)
        9:   36:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   37:	else
    #####:   38:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        9:   39:}
        -:   40:
        1:   41: void assertNotEquals(int Test,  int prev, int post)
        -:   42:{
        1:   43:	if(prev != post)
        1:   44:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   45:	else
    #####:   46:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        1:   47:}
        -:   48:
        3:   49:int runTest(int testNum){
        3:   50:	int numPlayers = 2;
        3:   51:	int newCard = 1;
        3:   52:	int seed = 1000;
        3:   53:	int thisPlayer = 0;
        3:   54:	int discard = 1;
        3:   55:	int handPos = 0;
        3:   56:	int selectedCard = 0;
        3:   57:	int trashFlag = 1;
        3:   58:	int subTest = 0;
        -:   59:	struct gameState G, testG;
        3:   60:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   61:			sea_hag, tribute, smithy, council_room};	
        -:   62:	
        3:   63:	initializeGame(numPlayers, k, seed, &G);
        -:   64:   
        -:   65:	// copy the game state to a test case
        3:   66:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   67:		
        3:   68:	switch(testNum)
        -:   69:	{
        -:   70:		case TEST_1:
        -:   71:					
        1:   72:			printf("Test 1. Card is added to play pile if card is not trashed.\n\n");
        1:   73:			trashFlag = 0;
        1:   74:			subTest = 1;
        1:   75:			handPos = testG.handCount[thisPlayer]-1;			
        -:   76:			
        -:   77:			//select card to discard
        1:   78:			selectedCard = testG.hand[thisPlayer][handPos];
        -:   79:			
        -:   80:			
        1:   81:			discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:   82:			
        1:   83:			printf("Test 1.1 Card is added to play pile.\n\n");
        1:   84:			printf("Top card from played pile = %d, expected = %d\n\n", testG.playedCards[testG.playedCardCount-1], selectedCard);
        1:   85:			assertEquals(subTest, testG.playedCards[testG.playedCardCount-1], selectedCard);
        1:   86:			subTest++;
        -:   87:			
        1:   88:			printf("Test 1.2 Play pile count incremented.\n\n");
        1:   89:			printf("Played card count = %d, expected = %d\n\n", testG.playedCardCount, G.playedCardCount + newCard);
        1:   90:			assertEquals(subTest, testG.playedCardCount, G.playedCardCount + newCard);
        -:   91:			
        1:   92:			return 0;
        -:   93:		case TEST_2:
        -:   94:					
        1:   95:			printf("Test 2. Card is not added to play pile if card is trashed.\n\n");
        1:   96:			trashFlag = 1;
        1:   97:			subTest = 1;
        1:   98:			handPos = testG.handCount[thisPlayer]-1;			
        -:   99:			
        -:  100:			//select card to discard
        1:  101:			selectedCard = testG.hand[thisPlayer][handPos];
        -:  102:			
        -:  103:			
        1:  104:			discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:  105:			
        1:  106:			printf("Test 2.1 Card is added to play pile.\n\n");
        1:  107:			printf("Top card from played pile = %d, expected = %d\n\n", testG.playedCards[testG.playedCardCount-1], selectedCard);
        1:  108:			assertNotEquals(subTest, testG.playedCards[testG.playedCardCount-1], selectedCard);
        1:  109:			subTest++;
        -:  110:			
        1:  111:			printf("Test 2.2 Play pile count incremented.\n\n");
        1:  112:			printf("Played card count = %d, expected = %d\n\n", testG.playedCardCount, G.playedCardCount);
        1:  113:			assertEquals(subTest, testG.playedCardCount, G.playedCardCount);
        -:  114:			
        1:  115:			return 0;
        -:  116:		case TEST_3:
        -:  117:		
        -:  118:					
        1:  119:			printf("Test 3. Selected card is removed from hand.\n\n");
        1:  120:			trashFlag = 1;
        1:  121:			subTest = 1;
        1:  122:			handPos = testG.handCount[thisPlayer]-1;			
        -:  123:			
        -:  124:			//select last card to discard
        1:  125:			selectedCard = testG.hand[thisPlayer][handPos];
        -:  126:			
        1:  127:			discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:  128:			
        1:  129:			printf("Test 3.1 Card is removed from top of hand.\n\n");
        1:  130:			printf("Top card from hand = %d, expected = %d\n\n", testG.hand[thisPlayer][handPos], -1);
        1:  131:			assertEquals(subTest, testG.hand[thisPlayer][handPos], -1);
        1:  132:			subTest++;
        -:  133:			
        1:  134:			printf("Test 3.2 hand count has decremented by one.\n\n");
        1:  135:			printf("Hand count = %d, expected = %d\n\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        1:  136:			assertEquals(subTest, testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        1:  137:			subTest++;
        -:  138:			
        1:  139:			printf("Test 3.3 Card is removed from hand with more than one card in hand and top card not selected.\n\n");
        -:  140:			
        1:  141:			handPos = testG.handCount[thisPlayer]-2;			
        -:  142:			
        -:  143:			//select last card to discard
        1:  144:			selectedCard = testG.hand[thisPlayer][handPos];
        -:  145:			
        1:  146:			discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:  147:			
        1:  148:			discard++;
        1:  149:			printf("Top card from hand = %d, expected = %d\n\n", testG.hand[thisPlayer][handPos], G.hand[thisPlayer][handPos-1]);
        1:  150:			assertEquals(subTest, testG.hand[thisPlayer][handPos], G.hand[thisPlayer][handPos-1]);
        1:  151:			subTest++;
        -:  152:			
        1:  153:			printf("Test 3.4 hand count has decremented by one.\n\n");
        1:  154:			printf("Hand count = %d, expected = %d\n\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        1:  155:			assertEquals(subTest, testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        1:  156:			subTest++;
        -:  157:			
        -:  158:			
        1:  159:			printf("Test 3.5 Last card from hand is removed.\n\n");
        -:  160:			
        4:  161:			while (testG.handCount[thisPlayer] != 1)
        -:  162:			{
        2:  163:				discardCard(testG.handCount[thisPlayer]-1, thisPlayer, &testG, trashFlag);
        2:  164:				discard++;
        -:  165:			}
        -:  166:			
        1:  167:			printf("hand count is %d\n\n", testG.handCount[thisPlayer]);
        -:  168:			
        -:  169:			
        -:  170:			//select last card to discard
        1:  171:			selectedCard = testG.hand[thisPlayer][0];
        -:  172:			
        1:  173:			printf("selectedcard = %d\n\n", selectedCard);
        -:  174:			
        1:  175:			discardCard(0, thisPlayer, &testG, trashFlag);
        -:  176:			
        1:  177:			discard++;
        1:  178:			printf("Last card from hand = %d, expected = %d\n\n", testG.hand[thisPlayer][0], -1);
        1:  179:			assertEquals(subTest, testG.hand[thisPlayer][0], -1);
        1:  180:			subTest++;
        -:  181:			
        1:  182:			printf("Test 3.6 hand count is 0.\n\n");
        1:  183:			printf("Hand count = %d, expected = %d\n\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        1:  184:			assertEquals(subTest, testG.handCount[thisPlayer], G.handCount[thisPlayer] - discard);
        -:  185:			
        -:  186:			
        1:  187:			return 0;
        -:  188:		default:
    #####:  189:			return -1;
        -:  190:	}
        -:  191:}
        -:  192:
        -:  193:
        1:  194:int main(){
        -:  195:	int i;
        -:  196:	
        1:  197:	printf("*******************************************\n");
        1:  198:    printf("---------- STARTING Test: %s ----------\n", TESTFUNCTION);
        1:  199:	printf("*******************************************\n");
        -:  200:    
        4:  201:	for(i=0;i<MAX_TESTS;i++)
        -:  202:	{
        3:  203:		runTest(i);
        -:  204:	}
        -:  205:	   
        -:  206:
        1:  207:    printf("*******************************************\n");
        1:  208:    printf("---------- COMPLETED Test: %s ---------\n", TESTFUNCTION);
        1:  209:	printf("*******************************************\n");
        1:  210:	printf("\n"); 
        1:  211:	printf("\n"); 
        1:  212:    return 0;
        -:  213:}
*******************************************
---------- STARTING Test: updateCoins ----------
*******************************************
Test 1. Hand with one copper and 0 bonus will result in 1 coin count.

coin count = 1, expected = 1

**********************Test #1: PASS

Test 2. Hand with one silver and 0 bonus will result in 2 coin count.

coin count = 2, expected = 2

**********************Test #2: PASS

Test 3. Hand with one gold and 0 bonus will result in 3 coin count.

coin count = 3, expected = 3

**********************Test #3: PASS

Test 4. Hand with zero coin cards and 1 bonus will result in 1 coin count.

coin count = 1, expected = 1

**********************Test #4: PASS

Test 5. Hand with more than one coin card and bonus will result in sum of all coins and bonus;

coin count = 11, expected = 11

**********************Test #5: PASS

Test 6. Hand with no coin cards and bonus will result with 0 coins.

coin count = 0, expected = 0

**********************Test #6: PASS

*******************************************
---------- COMPLETED Test: updateCoins ---------
*******************************************


File 'unittest2.c'
Lines executed:98.81% of 84
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * unittest1.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTFUNCTION "updateCoins"
        -:   19:#define MAX_TESTS 6
        -:   20:#define MAX_K 10
        -:   21:#define TEST_1 0
        -:   22:#define TEST_2 1
        -:   23:#define TEST_3 2
        -:   24:#define TEST_4 3
        -:   25:#define TEST_5 4
        -:   26:#define TEST_6 5
        -:   27:#define TRUE 1
        -:   28:#define FALSE 0
        -:   29:
        -:   30:/*
        -:   31: * Function Rules:
        -:   32: *1. Hand with one copper and 0 bonus will result in 1 coin count.
        -:   33: *2. Hand with one silver and 0 bonus will result in 2 coin count.
        -:   34: *3. Hand with one gold and 0 bonus will result in 3 coin count.
        -:   35: *4. Hand with zero coin cards and 1 bonus will result in 1 coin count.
        -:   36: *5. Hand with more than one coin card and bonus will result in sum of all coins and bonus;
        -:   37: *6. Hand with no coin cards and bonus will result with 0 coins.
        -:   38: *
        -:   39: */
        -:   40:
        6:   41:void assertEquals(int Test,  int prev, int post)
        -:   42:{
        6:   43:	if(prev == post)
        6:   44:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   45:	else
    #####:   46:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        6:   47:}
        -:   48:
        -:   49:
        1:   50:int main(){
        -:   51:	int i, j, l, m, n;
        1:   52:	int numPlayers = 2;
        1:   53:	int seed = 1000;
        1:   54:	int thisPlayer = 0;
        1:   55:	int newCoin = 0;
        1:   56:	int testNum = 1;
        1:   57:	int bonus = 0;
        -:   58:	struct gameState G, testG;
        1:   59:	int k[MAX_K] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   60:			sea_hag, tribute, smithy, council_room};	
        -:   61:		
        1:   62:	initializeGame(numPlayers, k, seed, &G);
        -:   63:	
        -:   64:	//clear the coin state
        1:   65:	G.coins = 0;
        -:   66:	
        -:   67:	// copy the game state to a test case
        1:   68:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:	
        1:   70:	printf("*******************************************\n");
        1:   71:    printf("---------- STARTING Test: %s ----------\n", TESTFUNCTION);
        1:   72:	printf("*******************************************\n");
        -:   73:  
        1:   74:	printf("Test 1. Hand with one copper and 0 bonus will result in 1 coin count.\n\n");
        -:   75:	
        1:   76:	newCoin = 1;
        1:   77:	bonus = 0;
        -:   78:	//modify hand to have one copper. 
        1:   79:	testG.hand[thisPlayer][0] = copper;
        -:   80:	//printf("Card %d in Hand contains %d, expected %d \n\n",0,testG.hand[thisPlayer][0],copper);
        -:   81:	
        -:   82:	//fill remaining hand with non coin cards
        5:   83:	for (i=1; i< testG.handCount[thisPlayer]; i++)
        -:   84:	{
        4:   85:		testG.hand[thisPlayer][i] = smithy;
        -:   86:	//printf("Card %d in Hand contains %d, expected %d \n\n",i,testG.hand[thisPlayer][i],smithy);
        -:   87:	}
        -:   88:	
        1:   89:	updateCoins(thisPlayer, &testG, bonus);
        -:   90:	
        1:   91:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:   92:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);;
        1:   93:	testNum++;
        -:   94:	
        -:   95:	
        1:   96:	printf("Test 2. Hand with one silver and 0 bonus will result in 2 coin count.\n\n");
        -:   97:	
        1:   98:	newCoin = 2;
        1:   99:	bonus = 0;
        -:  100:	//modify hand to have one copper. 
        1:  101:	testG.hand[thisPlayer][0] = silver;
        -:  102:	//printf("Card %d in Hand contains %d, expected %d \n\n",0,testG.hand[thisPlayer][0],silver);
        -:  103:	
        -:  104:	//fill remaining hand with non coin cards
        5:  105:	for (j=1; j< testG.handCount[thisPlayer]; j++)
        -:  106:	{
        4:  107:		testG.hand[thisPlayer][j] = smithy;
        -:  108:	//printf("Card %d in Hand contains %d, expected %d \n\n",i,testG.hand[thisPlayer][i],smithy);
        -:  109:	}
        -:  110:	
        1:  111:	updateCoins(thisPlayer, &testG, bonus);
        -:  112:	
        1:  113:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:  114:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);
        1:  115:	testNum++;
        -:  116:	
        1:  117:	printf("Test 3. Hand with one gold and 0 bonus will result in 3 coin count.\n\n");
        -:  118:	
        1:  119:	newCoin = 3;
        1:  120:	bonus = 0;
        -:  121:	//modify hand to have one copper. 
        1:  122:	testG.hand[thisPlayer][0] = gold;
        -:  123:	
        -:  124:	//fill remaining hand with non coin cards
        5:  125:	for (n=1; n< testG.handCount[thisPlayer]; n++)
        -:  126:	{
        4:  127:		testG.hand[thisPlayer][n] = smithy;
        -:  128:	}
        -:  129:	
        1:  130:	updateCoins(thisPlayer, &testG, bonus);
        -:  131:	
        1:  132:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:  133:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);
        1:  134:	testNum++;
        -:  135:	
        1:  136:	printf("Test 4. Hand with zero coin cards and 1 bonus will result in 1 coin count.\n\n");
        -:  137:	
        1:  138:	newCoin = 0;
        1:  139:	bonus = 1;
        -:  140:	
        -:  141:	//fill hand with non coin cards
        6:  142:	for (l=0; l< testG.handCount[thisPlayer]; l++)
        -:  143:	{
        5:  144:		testG.hand[thisPlayer][l] = smithy;
        -:  145:	}
        -:  146:	
        1:  147:	updateCoins(thisPlayer, &testG, bonus);
        -:  148:	
        1:  149:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:  150:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);
        1:  151:	testNum++;
        -:  152:	
        -:  153:	
        1:  154:	printf("Test 5. Hand with more than one coin card and bonus will result in sum of all coins and bonus;\n\n");
        -:  155:	
        1:  156:	newCoin = 10;//2 copper + 1 silver + 2 gold = 10
        1:  157:	bonus = 1;
        -:  158:	
        -:  159:	//fill hand with fixed coin cards
        1:  160:	testG.hand[thisPlayer][0] = copper;
        1:  161:	testG.hand[thisPlayer][1] = copper;
        1:  162:	testG.hand[thisPlayer][2] = silver;
        1:  163:	testG.hand[thisPlayer][3] = gold;
        1:  164:	testG.hand[thisPlayer][4] = gold;
        -:  165:	
        -:  166:	
        1:  167:	updateCoins(thisPlayer, &testG, bonus);
        -:  168:	
        1:  169:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:  170:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);
        1:  171:	testNum++;
        -:  172:	
        1:  173:	printf("Test 6. Hand with no coin cards and bonus will result with 0 coins.\n\n");
        -:  174:	
        1:  175:	newCoin = 0;
        1:  176:	bonus = 0;
        -:  177:	
        -:  178:	//fill hand with non coin cards
        6:  179:	for (m=0; m< testG.handCount[thisPlayer]; m++)
        -:  180:	{
        5:  181:		testG.hand[thisPlayer][m] = smithy;
        -:  182:	}
        -:  183:	
        1:  184:	updateCoins(thisPlayer, &testG, bonus);
        -:  185:	
        1:  186:	printf("coin count = %d, expected = %d\n", testG.coins, G.coins + newCoin + bonus);
        1:  187:	assertEquals(testNum, testG.coins, G.coins + newCoin + bonus);
        -:  188:	
        1:  189:    printf("*******************************************\n");
        1:  190:    printf("---------- COMPLETED Test: %s ---------\n", TESTFUNCTION);
        1:  191:	printf("*******************************************\n");
        1:  192:	printf("\n"); 
        1:  193:	printf("\n"); 
        1:  194:    return 0;
        -:  195:}
*******************************************
---------- STARTING Test: gainCard ----------
*******************************************
Test 1.Check if card is not in game.

Card not in game result = -1, expected = -1


**********************Test #1: PASS

Test 2. Add selected card to deck

Test 2.1. check if card is added to deck

card added to deck is = 7, expected = 7


**********************Test #1: PASS

Test 2.2. check if deck has incremented

Deck count = 6, expected = 6


**********************Test #2: PASS

Test 3. Add selected card to hand

Test 3.1. check if card is added to deck

card added to hand is = 7, expected = 7


**********************Test #1: PASS

Test 3.2. check if hand has incremented

Deck count = 6, expected = 6


**********************Test #2: PASS

Test 4. Add selected card to discard.

Test 4.1. check if card is added to discard

card added to discard is = 7, expected = 7


**********************Test #1: PASS

Test 4.2. check if discard pile has incremented

Deck count = 1, expected = 1


**********************Test #2: PASS

Test 5. Test that selected card's supply is decreased by one

Card supply is = 9, expected = 9


**********************Test #1: PASS

*******************************************
---------- COMPLETED Test: gainCard ---------
*******************************************


File 'unittest3.c'
Lines executed:97.14% of 70
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * unittest3.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTFUNCTION "gainCard"
        -:   19:#define MAX_TESTS 5
        -:   20:#define TEST_1 0
        -:   21:#define TEST_2 1
        -:   22:#define TEST_3 2
        -:   23:#define TEST_4 3
        -:   24:#define TEST_5 4
        -:   25:#define TEST_6 5
        -:   26:#define TEST_7 6
        -:   27:#define TRUE 1
        -:   28:#define FALSE 0
        -:   29:/*
        -:   30: *added card for [whoseTurn] current player:
        -:   31: * toFlag = 0 : add to discard
        -:   32: * toFlag = 1 : add to deck
        -:   33: * toFlag = 2 : add to hand
        -:   34: * Card Rules:
        -:   35: *1.Check if card is not in game.
        -:   36: *2. Add selected card to deck
        -:   37: *3. Add selected card to hand
        -:   38: *4. Add selected card to discard.
        -:   39: *5. Test that selected card's supply is decreased by one
        -:   40: */
        -:   41:
        8:   42:void assertEquals(int Test,  int prev, int post)
        -:   43:{
        8:   44:	if(prev == post)
        8:   45:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   46:	else
    #####:   47:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        8:   48:}
        -:   49:
        -:   50:
        5:   51:int runTest(int testNum){
        5:   52:	int numPlayers = 2;
        5:   53:	int subTest = 1;
        5:   54:	int newCard = 1;
        5:   55:	int seed = 1000;
        5:   56:	int thisPlayer = 0;
        5:   57:	int discard = 1;
        -:   58:	struct gameState G, testG;
        5:   59:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   60:			sea_hag, tribute, smithy, council_room};	
        -:   61:	
        5:   62:	int baron = 15;//used as test card that does not exists in game.
        -:   63:	int result;
        5:   64:	initializeGame(numPlayers, k, seed, &G);
        -:   65:    
        -:   66:	
        -:   67:	// copy the game state to a test case
        5:   68:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:	
        5:   70:	switch(testNum)
        -:   71:	{
        -:   72:		case TEST_1:
        -:   73:			
        1:   74:			printf("Test 1.Check if card is not in game.\n\n");
        1:   75:			result = gainCard(baron, &testG, 0, thisPlayer);
        -:   76:			
        1:   77:			printf("Card not in game result = %d, expected = %d\n\n", result, -1);
        1:   78:			assertEquals(subTest, result, -1);
        -:   79:			
        1:   80:			return 0;
        -:   81:		case TEST_2:
        1:   82:			printf("Test 2. Add selected card to deck\n\n");
        -:   83:			
        1:   84:			result = gainCard(k[0], &testG, 1, thisPlayer);
        1:   85:			printf("Test 2.1. check if card is added to deck\n\n");
        -:   86:			
        1:   87:			printf("card added to deck is = %d, expected = %d\n\n", testG.deck[thisPlayer][testG.deckCount[thisPlayer]-1], k[0]);
        1:   88:			assertEquals(subTest, testG.deck[thisPlayer][testG.deckCount[thisPlayer]-1], k[0]);
        1:   89:			subTest++;
        -:   90:			
        1:   91:			printf("Test 2.2. check if deck has incremented\n\n");
        -:   92:			
        1:   93:			printf("Deck count = %d, expected = %d\n\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+newCard);
        1:   94:			assertEquals(subTest, testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+newCard);
        -:   95:			
        1:   96:			return 0;
        -:   97:		case TEST_3:
        1:   98:			printf("Test 3. Add selected card to hand\n\n");
        -:   99:			
        1:  100:			result = gainCard(k[0], &testG, 2, thisPlayer);
        1:  101:			printf("Test 3.1. check if card is added to deck\n\n");
        -:  102:			
        -:  103:			
        1:  104:			printf("card added to hand is = %d, expected = %d\n\n", testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], k[0]);
        1:  105:			assertEquals(subTest, testG.hand[thisPlayer][testG.handCount[thisPlayer]-1], k[0]);
        1:  106:			subTest++;
        -:  107:						
        1:  108:			printf("Test 3.2. check if hand has incremented\n\n");
        -:  109:			
        1:  110:			printf("Deck count = %d, expected = %d\n\n", testG.handCount[thisPlayer], G.handCount[thisPlayer]+newCard);
        1:  111:			assertEquals(subTest, testG.handCount[thisPlayer], G.handCount[thisPlayer]+newCard);
        -:  112:					
        1:  113:			return 0;
        -:  114:		case TEST_4:
        -:  115:		
        1:  116:			printf("Test 4. Add selected card to discard.\n\n");
        -:  117:			
        1:  118:			result = gainCard(k[0], &testG, 0, thisPlayer);
        1:  119:			printf("Test 4.1. check if card is added to discard\n\n");
        -:  120:						
        1:  121:			printf("card added to discard is = %d, expected = %d\n\n", testG.discard[thisPlayer][testG.discardCount[thisPlayer]-1], k[0]);
        1:  122:			assertEquals(subTest, testG.discard[thisPlayer][testG.discardCount[thisPlayer]-1], k[0]);
        1:  123:			subTest++;
        -:  124:			
        -:  125:			
        1:  126:			printf("Test 4.2. check if discard pile has incremented\n\n");
        -:  127:			
        1:  128:			printf("Deck count = %d, expected = %d\n\n", testG.discardCount[thisPlayer], G.discardCount[thisPlayer]+newCard);
        1:  129:			assertEquals(subTest, testG.discardCount[thisPlayer], G.discardCount[thisPlayer]+newCard);
        -:  130:			
        1:  131:			return 0;
        -:  132:		case TEST_5:
        -:  133:		
        1:  134:			printf("Test 5. Test that selected card's supply is decreased by one\n\n");
        -:  135:			
        1:  136:			result = gainCard(k[0], &testG, 1, thisPlayer);
        -:  137:			
        1:  138:			printf("Card supply is = %d, expected = %d\n\n",testG.supplyCount[k[0]], G.supplyCount[k[0]]-discard);
        1:  139:			assertEquals(subTest, testG.supplyCount[k[0]], G.supplyCount[k[0]]-discard);
        -:  140:			
        1:  141:			return 0;
        -:  142:		default:
    #####:  143:			return -1;
        -:  144:	}
        -:  145:}
        -:  146:
        1:  147:int main(){
        -:  148:	int i;
        -:  149:	
        1:  150:	printf("*******************************************\n");
        1:  151:    printf("---------- STARTING Test: %s ----------\n", TESTFUNCTION);
        1:  152:	printf("*******************************************\n");
        -:  153:    
        6:  154:	for(i=0;i<MAX_TESTS;i++)
        -:  155:	{
        5:  156:		runTest(i);
        -:  157:	}
        -:  158:
        1:  159:    printf("*******************************************\n");
        1:  160:    printf("---------- COMPLETED Test: %s ---------\n", TESTFUNCTION);
        1:  161:	printf("*******************************************\n");
        1:  162:	printf("\n"); 
        1:  163:	printf("\n"); 
        1:  164:    return 0;
        -:  165:}
*******************************************
---------- STARTING Test: isGameOver ----------
*******************************************
Test 1.Check if game ends if Province supply is empty.

Game end state is = 1, expected = 1


**********************Test #0: PASS

Test 2. Game over if three or more supply cards are empty.

Game end state is = 1, expected = 1


**********************Test #1: PASS

Test 2. Game is not over if test 1 & 2 conditions are not met.

Game end state is = 0, expected = 0


**********************Test #2: PASS

*******************************************
---------- COMPLETED Test: isGameOver ---------
*******************************************


File 'unittest4.c'
Lines executed:95.45% of 44
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * sabinc
        -:    3: * CS 362 SW Eng II
        -:    4: * Spring 2017
        -:    5: *
        -:    6: * Assignment 3
        -:    7: * unittest4.c
        -:    8: */
        -:    9: 
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <stdlib.h>
        -:   17:
        -:   18:#define TESTFUNCTION "isGameOver"
        -:   19:#define MAX_TESTS 3
        -:   20:#define TEST_1 0
        -:   21:#define TEST_2 1
        -:   22:#define TEST_3 2
        -:   23:#define TRUE 1
        -:   24:#define FALSE 0
        -:   25:
        -:   26:/*
        -:   27: * Function Rules:
        -:   28: *1. function returns 1 if stack of province cards is empty
        -:   29: *2. function returns 1 if three or more supply piles are at zero
        -:   30: *3. function returns 0 if less than three supply piles and province is not zero
        -:   31: *3. Otherwise return 0
        -:   32: *4.
        -:   33: *
        -:   34: */
        -:   35:
        3:   36:void assertEquals(int Test,  int prev, int post)
        -:   37:{
        3:   38:	if(prev == post)
        3:   39:		printf("\n**********************Test #%d: PASS\n\n", Test);
        -:   40:	else
    #####:   41:		printf("\n**********************Test #%d: FAIL\n\n", Test);
        3:   42:}
        -:   43:
        3:   44:int runTest(int testNum){
        3:   45:	int numPlayers = 2;
        3:   46:	int seed = 1000;
        -:   47:	struct gameState G, testG;
        -:   48:	int result;
        -:   49:	
        3:   50:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   51:			sea_hag, tribute, smithy, council_room};
        -:   52:	
        3:   53:	initializeGame(numPlayers, k, seed, &G);
        -:   54:   
        -:   55:	// copy the game state to a test case
        3:   56:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   57:		
        3:   58:	switch(testNum)
        -:   59:	{
        -:   60:		case TEST_1:
        -:   61:			//in order to proove that having no provinces in supply will end the game we must first empty the supply
        1:   62:			testG.supplyCount[province] = 0; 
        -:   63:			
        1:   64:			printf("Test 1.Check if game ends if Province supply is empty.\n\n");
        1:   65:			result = isGameOver(&testG);
        -:   66:			
        1:   67:			printf("Game end state is = %d, expected = %d\n\n", result, 1);
        1:   68:			assertEquals(TEST_1, result,1);
        -:   69:			
        1:   70:			return 0;
        -:   71:		case TEST_2:
        -:   72:			//in order to proove that having at least three cards empty in supply will end the game we must first empty the supply cards
        1:   73:			testG.supplyCount[smithy] = 0; 
        1:   74:			testG.supplyCount[adventurer] = 0; 
        1:   75:			testG.supplyCount[village] = 0; 
        -:   76:			
        1:   77:			printf("Test 2. Game over if three or more supply cards are empty.\n\n");
        1:   78:			result = isGameOver(&testG);
        -:   79:			
        -:   80:			
        1:   81:			printf("Game end state is = %d, expected = %d\n\n", result, 1);
        1:   82:			assertEquals(TEST_2, result,1);
        -:   83:			
        1:   84:			return 0;
        -:   85:		case TEST_3:
        -:   86:		
        -:   87:			//leave game state alone after initialization. 
        -:   88:			//All supply cards are not empty. Therefore game should not end.
        1:   89:			printf("Test 2. Game is not over if test 1 & 2 conditions are not met.\n\n");
        1:   90:			result = isGameOver(&testG);
        -:   91:			
        1:   92:			printf("Game end state is = %d, expected = %d\n\n", result, 0);
        1:   93:			assertEquals(TEST_3, result,0);
        -:   94:			
        1:   95:			return 0;
        -:   96:		default:
    #####:   97:			return -1;
        -:   98:	}
        -:   99:}
        -:  100:
        1:  101:int main(){
        -:  102:	int i;
        -:  103:	
        1:  104:	printf("*******************************************\n");
        1:  105:    printf("---------- STARTING Test: %s ----------\n", TESTFUNCTION);
        1:  106:	printf("*******************************************\n");
        -:  107:    
        4:  108:	for(i=0;i<MAX_TESTS;i++)
        -:  109:	{
        3:  110:		runTest(i);
        -:  111:	}
        -:  112:	
        1:  113:    printf("*******************************************\n");
        1:  114:    printf("---------- COMPLETED Test: %s ---------\n", TESTFUNCTION);
        1:  115:	printf("*******************************************\n");
        1:  116:	printf("\n"); 
        1:  117:	printf("\n"); 
        1:  118:    return 0;
        -:  119:}
